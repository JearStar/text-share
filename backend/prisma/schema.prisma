// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(uuid())
  email               String          @unique
  password            String
  name                String
  createdAt           DateTime        @default(now())
  isVerified          Boolean         @default(false)

  Document            Document[]      @relation("AuthorDocuments")
  refreshTokens       RefreshToken[]
  emailTokens         EmailToken[]
  Device              Device[]
}

model Document {
  id                  String          @id @default(uuid())
  title               String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  authorId            String
  author              User            @relation("AuthorDocuments", fields: [authorId], references: [id])
}

model RefreshToken {
  id                  String          @id @default(uuid())
  tokenHash           String
  createdAt           DateTime        @default(now())
  expiresAt           DateTime

  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  device              Device          @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId            String

  @@index([userId])
  @@index([deviceId])
}

model EmailToken {
  id                  String          @id @default(uuid())
  tokenHash           String
  type                EmailTokenType
  createdAt           DateTime        @default(now())
  expiresAt           DateTime

  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String

  @@index([userId])
}

model Device {
  id                  String          @id @default(uuid())
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  deviceHash          String
  refreshTokens       RefreshToken[]
  createdAt           DateTime        @default(now())
  expiresAt           DateTime
}

enum EmailTokenType {
  VERIFY_EMAIL
  RESET_PASSWORD
}